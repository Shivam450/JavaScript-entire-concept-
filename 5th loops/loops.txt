1/Feb/2024
Lesson - JavaScript Loops & Control Statements
        What is a loop
        Why we need a loop
        Types of Loops
            For Loop
                for(where to start;where to end;how to go from start to end){

                }

                for(step = 1; step <=10; step++)
                {

                }
                for(Initialisation; Condition; Increment/Decrement)
                {

                }

            Examples:

            for(let i = 0; i <=10 ; i++)
            {
                console.log("I am walking and I have walked step No: "+ i)
            }

            for(let i = 10; i >=1 ; i--)
            {
                console.log("I am walking and I have walked step No: "+ i)
            }

            for(let i = 0; i <=10 ; i+=2)
            {
                console.log("I am walking and I have walked step No: "+ i)
            }

            for(let i = 1; i <=10 ; i+=2)
            {
                console.log("I am walking and I have walked step No: "+ i)
            }

for(;;)
{
    console.log("Hello Hru")
}

for(let i = 0; i >= 0; i++)
{

}

            Arrays
            => Collection of similar items
            => Number, Strings, Boolean, Objects, etc...
            => Arrays are represented using [] braces. Each item inside it is separated by , symbol.
            => The items will be stored in a continuous memory location.

            var a = [1,2,3,4,5] // Arrays of Numbers
            var b = ['a','b','c','d','e']   // Array of Strings
            var c = [true,false,true,true,false]    // Array of Boolean.

                position(Start from 1) Vs Index(Start from 0)
                var a = [1,2,3,4,5]

                In JS, with the help of index number you can access the item.
                a[2] will give me the 3rd item.


            JavaScript Objects
            => Collection of key value pairs
            => The key is always a string(alphabet in nature) but it is not enclosed with ' or " quotes.
            => The value can be both primitive and non primitive.
            => It is represent using a {} braces. Each key value pair is separated by a , symbol and
            the key and value are separated using : symbol.
            
            var a = {name: "Raghu", age: 34, salary: 300}

                In JS, with the help of key name you can access the value.
                First Approach
                    a.name will give me the value Raghu.
                Second Approach
                    a['name']   will give me the value Raghu.



            For in Loop 
            => It is used to Iterate Objects

            var a = {name: "Raghu", age: 34, salary: 300}
            console.log(a.name)
            console.log(a['name'])

            for(let x in a)
            {
                console.log(x)  // x will access the key.
                console.log(a[x])   // a[x] will acess the value.
            }

            For Of Loop 
            => It is used to Iterate Array, String, Maps, Sets, Nested Arrays, etc..

            var a = [1,2,3,4,5] // Arrays of Numbers
// console.log(a)
// console.log(a[2])   // 2 is Index Hence 3rd item will be accessed and displayed.
// for(let i = 0; i < a.length;i++)
// {
//     console.log(a[i]) 
// }

for(let x of a)
{
    console.log(x)  // x accesses the item
}


// var b = ['a','b','c','d','e']   // Array of Strings
// console.log(b)
// var c = [true,false,true,true,false]    // Array of Boolean.
// console.log(c)

            ForEach Loop    // ES5 AND ES6 Lesson (... Spread Operator)

            While Loop
            => The Loop will execute only if the condition is true.

            Do While Loop
            => The Loop will execute atleast once even if the condition is false.

            var i =0
while(i<3)  // 0<3, 1<3, 2<3, 3<3 - It Stops
{
    console.log("Hello Hru, I am while")
    i++
}

var j = 0
do
{
    console.log("Hello Hru, I am do while") // 0, 1<3, 2<3, 3<3 - It stops
    j++
}while(j<3) 

        Control Statements
            => These statements/ keywords are used to control the flow of the Program's Execution
            break   => It will stop the flow of execution and throws the flow outside of switch statement
            at the end of the switch's scope.
            continue

            var a = 2
while(1)
{
    if(a>1)
    {
        console.log("Hello")
        break
    }
    else
        console.log('123')
        continue
}

var pos = 0
var neg = 0
function checksign(a,b,c)
{
    if(a<0)
        neg++
    else
        pos++
    if(b<0)
        neg++
    else
        pos++
    if(c<0)
        neg++
    else
        pos++

    if(pos == 3)
        console.log('+++')
    else if(pos == 2)
        console.log('++-')
    else if(pos == 1)
        console.log('+--')
    else
        console.log('---')

}
checksign(2,-1,1)
